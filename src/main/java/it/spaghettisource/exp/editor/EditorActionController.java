package it.spaghettisource.exp.editor;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;

import io.github.geniot.jortho.SpellChecker;

/**
 * This class is the controller of the application, it manage the action of the user
 * and delegate the operation to the model
 */
public class EditorActionController extends AbstractAction{

    public static final String COPY = "COPY";
    public static final String CUT = "CUT";
    public static final String PASTE = "PASTE";
    public static final String UNDO = "UNDO";
    public static final String REDO = "REDO";
    public static final String ALIGN_JUSTIFY = "ALIGN_JUSTIFY";
    public static final String ALIGN_LEFT = "ALIGN_LEFT";
    public static final String ALIGN_CENTER = "ALIGN_CENTER";
    public static final String ALIGN_RIGHT = "ALIGN_RIGHT";
    public static String NEW_DOCUMENT = "NEW_DOCUMENT";
    public static final String FILE_OPEN = "FILE_OPEN";
    public static final String FILE_SAVE = "FILE_SAVE";
    public static final String CLOSE = "CLOSE";
    public static final String STYLE_APPLY = "STYLE_APPLY";
    public static final String STYLE_FONT_BOLD = "STYLE_FONT_BOLD";
    public static final String STYLE_FONT_ITALIC = "STYLE_FONT_ITALIC";
    public static final String STYLE_FONT_SIZE = "STYLE_FONT_SIZE";
	public static final String FIND = "FIND";
	public static final String REPLACE = "REPLACE";
	public static final String CHECK_SPELLING = "CHECK_SPELLING";


    private final Component parent;

    private final Editor editor;
    private final JFrame frame;
    private JFileChooser rtfFileChooser;

    private boolean enableActions = true;

    public EditorActionController(JFrame frame, Component parent, Editor editor) {
        super();
        this.frame = frame;
        this.parent = parent;
        this.editor = editor;
        
        //clean any property on the action, by default same values are stored here
		putValue(Action.ACTION_COMMAND_KEY,"");

        initializeFileChooser();
    }

    public void enableActions() {
        this.enableActions = true;
    }

    public void disableActions() {
        this.enableActions = false;
    }

    protected void initializeFileChooser() {
        rtfFileChooser = new JFileChooser();
        rtfFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        rtfFileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File f) {
            	
        		//TODO - log file extesion
                return f.getName().toLowerCase().endsWith(".txt") || f.isDirectory();
            }

            public String getDescription() {
                return "txt files";
            }
        });
    }
    
    /**
     * This class is an ActionListener but is also an Action, the code rely on the actionCommand configured on the UI element and not on the property of the Action: Action.ACTION_COMMAND_KEY
     * so this class is a dispatcher between all the UI components
     * 
     * When the event is generated by the KeyStroke, in this case the event we have the correct source but the ActionCommand of the source is not propagated (because should be linked to the Action Action.ACTION_COMMAND_KEY)
     * in this case this method will determine automatically what is the ActionCommand of the UI element
     * 
     * @param event
     * @return
     */
	private String findActionCommandFromSourceComponent(ActionEvent event) {
		String command = event.getActionCommand();
        
        if(command.isEmpty()) {
        	Object source = event.getSource();
        	if(source instanceof AbstractButton) {
        		command = ((AbstractButton) source).getActionCommand();
        	} 
        }
		return command;
	}

    @Override
    public void actionPerformed(ActionEvent event) {

        if(!enableActions){
            return;
        }

        String command = findActionCommandFromSourceComponent(event);
        
        try{

            frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            if(command.equals(NEW_DOCUMENT)) {
                editor.createNewDocument();

            }else if (command.equals(FILE_OPEN)) {
                int returnVal = rtfFileChooser.showOpenDialog(parent);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    editor.loadFromFile(rtfFileChooser.getSelectedFile());
                }

            }else if(command.equals(FILE_SAVE)){
                int returnVal = rtfFileChooser.showSaveDialog(parent);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    editor.saveToFile(rtfFileChooser.getSelectedFile());
                }

            }else if(command.equals(CLOSE)){
                System.exit(0);

            }else if(command.equals(STYLE_FONT_BOLD)){
                JToggleButton source = (JToggleButton) event.getSource();
                editor.setFontStyleBoldActualSelection(source.isSelected());

            }else if(command.equals(STYLE_FONT_ITALIC)) {
                JToggleButton source = (JToggleButton) event.getSource();
                editor.setFontStyleItalicActualSelection(source.isSelected());

            }else if(command.equals(STYLE_FONT_SIZE)){
                JComboBox<String> source = (JComboBox) event.getSource();
                editor.setFontSizeActualSelection((String) source.getSelectedItem());

            }else if(command.equals(COPY)){
                editor.copy();

            }else if(command.equals(CUT)) {
                editor.cut();

            }else if(command.equals(PASTE)){
                editor.paste();

            }else if(command.equals(UNDO)){
                editor.undo();

            }else if(command.equals(REDO)){
                editor.redo();

            }else if(command.equals(STYLE_APPLY)){
                JComboBox<String> source = (JComboBox) event.getSource();
                editor.setStyle((String) source.getSelectedItem());

            }else if(command.equals(ALIGN_JUSTIFY)) {
                editor.setAlignmentJustify();
                
            }else if(command.equals(ALIGN_LEFT)) {
                editor.setAlignmentLeft();
                
            }else if(command.equals(ALIGN_CENTER)) {
                editor.setAlignmentCenter();
                
            }else if(command.equals(ALIGN_RIGHT)) {
                editor.setAlignmentRight();
                
            }else if(command.equals(FIND)) {
                editor.findText();
           	
            }else if(command.equals(REPLACE)) {
                editor.replaceText();
				
            }else if(command.equals(CHECK_SPELLING)) {
            	 editor.checkSpelling();
            }


        }catch (Exception ex){
            JOptionPane.showMessageDialog(frame, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }finally {
            frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }

    }



}
